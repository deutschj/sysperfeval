BEGIN
{
    printf("PostgreSQL statement execution analyzer.\n");
    printf("Time in microseconds (us).\n");
    printf("pid   :Phase      :time to phase :time in phase : query\n");
    printf("------|-----------|--------------|--------------|------\n");
}
usdt:/proc/1908341/root/usr/lib/postgresql/16/bin/postgres:statement__status
{
    @current_statement[pid] = str(arg0);
}
usdt:/proc/1908341/root/usr/lib/postgresql/16/bin/postgres:query__start
{
    $time = nsecs;
    printf("[%5u]Query start:              :              : %s\n", pid, str(arg0));
    @query_start[pid] = $time;
    @phase_done[pid] = $time;
    @query_trigger[pid] = 1;
}
usdt:/proc/1908341/root/usr/lib/postgresql/16/bin/postgres:query__done
{
    $time = nsecs;
    $query_end = $time - @query_start[pid];
    printf("[%5u]Query done : (%10u) :    %10u: %s\n", pid, ($time - @phase_done[pid])/1000, $query_end/1000, str(arg0));
    @parse[pid] = (uint64)0;
    @rewrite[pid] = (uint64)0;
    @plan[pid] = (uint64)0;
    @execute[pid] = (uint64)0;
    @query_trigger[pid] = 0;
}
